name: Cross-Platform CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libglib2.0-0 libsm6 libxext6 libxrender1 libgomp1 python3-dev
        echo "‚úÖ Ubuntu system dependencies installed"

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS usually has most dependencies built-in
        brew install --quiet python-tk || echo "python-tk already available"
        echo "‚úÖ macOS system dependencies ready"

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows doesn't need additional system packages for basic OpenCV
        echo "‚úÖ Windows system dependencies ready"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy==1.24.3
        pip install opencv-python-headless==4.8.1.78
        pip install Pillow==10.0.1
        pip install PyYAML==6.0.1
        pip install mediapipe==0.10.7

    - name: Test core imports
      run: |
        python -c "
        import sys
        print(f'Python {sys.version}')
        print(f'Platform: {sys.platform}')
        
        try:
            import cv2
            print(f'‚úÖ OpenCV {cv2.__version__} works')
        except Exception as e:
            print(f'‚ùå OpenCV failed: {e}')
            sys.exit(1)
        
        try:
            import numpy as np
            print(f'‚úÖ NumPy {np.__version__} works')
        except Exception as e:
            print(f'‚ùå NumPy failed: {e}')
            sys.exit(1)
        
        try:
            import mediapipe as mp
            print(f'‚úÖ MediaPipe {mp.__version__} works')
        except Exception as e:
            print(f'‚ùå MediaPipe failed: {e}')
            sys.exit(1)
        
        try:
            import yaml
            print('‚úÖ PyYAML works')
        except Exception as e:
            print(f'‚ùå PyYAML failed: {e}')
            sys.exit(1)
        
        print('üéâ All core dependencies work!')
        "

    - name: Test project structure
      shell: bash
      run: |
        echo "üîç Checking project structure..."
        
        # Check main files
        for file in "main_app.py" "run_app.py" "README.md" "INSTALL.md" "LICENSE" "requirements.txt"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        # Check directories
        for dir in "tools" "models" "utils" "config" "docs"; do
          if [ -d "$dir" ]; then
            echo "‚úÖ $dir/ directory exists"
          else
            echo "‚ùå $dir/ directory missing"
            exit 1
          fi
        done
        
        echo "‚úÖ Project structure is valid on ${{ matrix.os }}"

    - name: Test system requirements checker
      run: |
        python tools/check_requirements.py || echo "Requirements checker completed with warnings (expected in CI)"

    - name: Test basic functionality
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        print('üîç Testing basic functionality...')
        
        # Test configuration loading
        try:
            from utils.config_manager import ConfigManager
            print('‚úÖ Config manager import OK')
        except ImportError as e:
            print(f'‚ö†Ô∏è Config manager import failed: {e}')
        
        print(f'‚úÖ Basic functionality test completed on {sys.platform}')
        "

  syntax-check:
    name: Python Syntax Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Check Python syntax
      run: |
        python -c "
        import ast
        import sys
        import os
        
        files_to_check = ['main_app.py', 'run_app.py']
        
        for file in files_to_check:
            if os.path.exists(file):
                try:
                    with open(file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    ast.parse(content)
                    print(f'‚úÖ {file} has valid Python syntax')
                except SyntaxError as e:
                    print(f'‚ùå {file} has syntax error: {e}')
                    sys.exit(1)
                except Exception as e:
                    print(f'‚ö†Ô∏è Could not check {file}: {e}')
            else:
                print(f'‚ö†Ô∏è {file} not found')
        
        print('‚úÖ Syntax check completed')
        "

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate documentation
      run: |
        echo "üîç Checking documentation..."
        
        # Check README.md
        if [ -f "README.md" ]; then
          lines=$(wc -l < README.md)
          echo "‚úÖ README.md exists ($lines lines)"
        else
          echo "‚ùå README.md missing"
          exit 1
        fi
        
        # Check INSTALL.md
        if [ -f "INSTALL.md" ]; then
          echo "‚úÖ INSTALL.md exists"
        else
          echo "‚ùå INSTALL.md missing"
          exit 1
        fi
        
        # Check startup scripts
        if [ -f "start.bat" ]; then
          echo "‚úÖ Windows startup script exists"
        fi
        
        if [ -f "start.sh" ]; then
          echo "‚úÖ Unix startup script exists"
        fi
        
        echo "‚úÖ Documentation validation completed"